swagger: "2.0"
info:
  version: 1.0.0
  title: "Case Management"
  description: "A case management API specification"
  termsOfService: http://swagger.io/terms/
  contact:
    name: Nutella API Team
    email: eihab@Nutella.com
    url: http://madskristensen.net
tags:
  - name: cases
    description: Cases operations
  - name: tasks
    description : Tasks operations  
  - name: search
    description: Search a data set

paths:
  /users/{userId}/cases:
    get :
        description: "get list of case"
        operationId: "findCases"
        tags: 
            - cases
        parameters:
          - $ref: '#/parameters/userIdParam' 
          - $ref: '#/parameters/skipParam'
          - $ref: '#/parameters/limitParam'
          - $ref: '#/parameters/issuedParam'
          - $ref: '#/parameters/priorityParam'
          - name: "status"
            in: "query"
            description: "statuses to filter by"
            required: false
            type: array
            items:
              type: string

        responses: 
            "200":
               $ref: '#/responses/CollectionResponse'
            default: 
               $ref: '#/responses/GeneralError'
    post :
        description: "Creates a new case"
        operationId: "addCase"
        tags: 
            - cases  
            
        parameters:
          - name: "case"
            in: "body"
            description: "case to add to the case management"
            required: true
            schema:
                  $ref: '#/definitions/NewCase' 
            examples: 
                objectExample:
                    externalValue: 'http://jsoneditoronline.org/?id=7a307fc39d48cb1dc3338fb1c5456163'       
        
        responses: 
            "200":
                $ref: '#/responses/CaseResponse'
            default: 
                $ref: '#/responses/GeneralError'
                  
                  
  /departments/{departmentCode}/cases/{caseId}:
    get: 
        description: "get a single case based on the ID supplied"
        operationId: "findCaseById"
        tags: 
            - cases
        parameters:
            - $ref: '#/parameters/departmentCodeParam'
            - $ref: '#/parameters/caseIdParam'
              
            - name: "details" 
              in: "query"
              description: "Specify the details of the data"
              required: false
              type: "string"
              enum:
                - DEEP
                - SHALLOW
              default: SHALLOW
              
            - name: "lang" 
              in: "query"
              description: "Specify the language of the fields"
              required: false
              type: "string" 
              enum:
                - ar
                - en
              default: ar
        responses: 
            "200":
                $ref: '#/responses/CaseDetailResponse'
            default: 
                $ref: '#/responses/GeneralError'

    delete: 
        description: "deletes a single case based on the ID supplied"
        operationId: "deleteCase"
        tags: 
            - cases
        parameters: 
          - $ref: '#/parameters/caseIdParam'  
        responses: 
            "204":
                description: "case deleted"
            default: 
                $ref: '#/responses/GeneralError'

    put :
        description: "update a new case"
        operationId: "updateCaseById"
        tags: 
            - cases
        parameters:
            - $ref: '#/parameters/caseIdParam'
            - name: "case"
              in: "body"
              description: "case to update to the case management"
              required: true
              schema:
                    $ref: '#/definitions/Case'  
        responses: 
            "200":
                $ref: '#/responses/CaseResponse'
            default: 
                $ref: '#/responses/GeneralError'     
    
  /users/{userId}/cases/search:
    post :
        description: "Search about cases"
        operationId: "searchCase"
        tags: 
            - cases
            - search
        parameters:
            - $ref: '#/parameters/userIdParam' 
            - name: "search"
              in: "body"
              description: "filters to retrive cases"
              required: true
              schema:
                    $ref: '#/definitions/Search'       
        responses: 
            "200":
                $ref: '#/responses/CollectionResponse'
            default: 
                $ref: '#/responses/GeneralError'
                  
        
  /users/{userId}/tasks:
    get :
        description: "get list of assignee task"
        operationId: "findAssgineeTask"
        tags: 
            - tasks
        parameters:

          - $ref: '#/parameters/userIdParam'      
          - $ref: '#/parameters/skipParam'
          - $ref: '#/parameters/limitParam'
          - $ref: '#/parameters/issuedParam'
          - $ref: '#/parameters/priorityParam'
          
          - name: "departmentCode"
            in: "query"
            description: "departments to filter by"
            required: false
            type: array
            items:
              type: string  

        responses: 
            "200":
                $ref: '#/responses/CollectionResponse'
            default: 
                $ref: '#/responses/GeneralError'
  /departments/{departmentCode}/users/{userId}/tasks/{taskId}:   
    get :
        description: "get task by ID"
        operationId: "findTaskById"
        tags: 
            - tasks
        parameters:
          - $ref: '#/parameters/departmentCodeParam'  
          - $ref: '#/parameters/userIdParam'       
          - $ref: '#/parameters/taskIdParam'
                               
        responses: 
          "200":
                $ref: '#/responses/TaskResponse'
          default: 
                $ref: '#/responses/GeneralError'  
                
  
  /users/{userId}/tasks/search:
    post :
        description: "Search about tasks"
        operationId: "searchTask"
        tags: 
            - tasks
            - search
        parameters:
            - $ref: '#/parameters/userIdParam' 
            - name: "search"
              in: "body"
              description: "filters to retrive cases"
              required: true
              schema:
                    $ref: '#/definitions/Search'      
        responses: 
            "200":
                $ref: '#/responses/CollectionResponse'
            default: 
                $ref: '#/responses/GeneralError' 
                
  /departments/{departmentCode}/users/{userId}/tasks/types/{taskType}:   
    get :
        description: "get list of assignee task"
        tags: 
            - tasks
        parameters:
          - $ref: '#/parameters/departmentCodeParam'  
          - $ref: '#/parameters/userIdParam'
       
          - $ref: '#/parameters/skipParam'
          - $ref: '#/parameters/limitParam'
          - $ref: '#/parameters/issuedParam'
          - $ref: '#/parameters/priorityParam'
          
          - name: "solved"
            in: "query"
            description: "solved date to filter by for historical type"
            required: false
            type: "string"
            format: "date"  
              
          - name: "taskType"
            in: "path"
            description: "task type"
            required: true
            type: "string"
            enum:
              - ASSIGNEE
              - PERMISSION
              - CANDIDATE
              - HISTORICASSIGNEE
              - HISTORICAUTHORIZED
            default: ASSIGNEE        
    
        responses: 
          "200":
                $ref: '#/responses/CollectionResponse'
          default: 
                $ref: '#/responses/GeneralError'

  /departments/{departmentCode}/users/{userId}/tasks:                    
    post :
        description: "Creates a new task"
        operationId: "addTask"
        tags: 
            - tasks 
        parameters:
          - $ref: '#/parameters/userIdParam' 
          - $ref: '#/parameters/departmentCodeParam'
          - name: "task"
            in: "body"
            description: "task to add to the case management"
            required: true
            schema:
              $ref: '#/definitions/TaskMini'           

        responses: 
            "200":
                description: "task response"
                schema:
                  $ref: '#/definitions/Task'
            default: 
                $ref: '#/responses/GeneralError'
  
  /departments/{departmentCode}/users/{userId}/tasks/{taskId}/delegate/{delegateTo}:   
    put :
        description: "delegate task"
        operationId: "delegateTask"
        tags: 
            - tasks
        parameters:
          - $ref: '#/parameters/departmentCodeParam'  
          - $ref: '#/parameters/userIdParam'       
          - $ref: '#/parameters/taskIdParam'
                        
          - name: "delegateTo"
            in: "path"
            description: "user id want delegate to"
            required: true
            type: "string"
       
        responses: 
          "200":
                $ref: '#/responses/TaskResponse'
          default: 
                $ref: '#/responses/GeneralError'                
  
  
  /departments/{departmentCode}/users/{userId}/tasks/{taskId}/reassign/{assignTo}:   
    put :
        description: "re-assignee task"
        operationId: "reAssgineeTask"
        tags: 
            - tasks
        parameters:
          - $ref: '#/parameters/departmentCodeParam'  
          - $ref: '#/parameters/userIdParam'       
          - $ref: '#/parameters/taskIdParam'
                        
          - name: "assignTo"
            in: "path"
            description: "user id of new assignee"
            required: true
            type: "string"
       
        responses: 
          "200":
                $ref: '#/responses/TaskResponse'
          default: 
                $ref: '#/responses/GeneralError'  

parameters:
    caseIdParam:
        name: "caseId"
        in: "path"
        description: "ID of case to process"
        required: true
        type: "integer"
        format: "int64"
            
    skipParam:
      name: "skip"
      in: "query"
      description: "number of items to skip"
      required: true
      type: "integer"
      format: "int32"
      default: 0
      minimum: 0

    limitParam:
      name: "limit"
      in: "query"
      description: "maximum number of results to return"
      required: true
      type: "integer"
      format: "int32"
      default: 10
      minimum: 1 

    issuedParam:
        name: "issued"
        in: "query"
        description: "issued date to filter by"
        required: false
        type: "string"
        format: "date" 

    priorityParam:        
        name: "priority"
        in: "query"
        description: "priorities to filter by"
        required: false
        type: array
        collectionFormat: csv
        items:
          type: string 

    userIdParam: 
        name: "userId"
        in: "path"
        description: "ID of user to process his task"
        required: true
        type: "integer"
        format: "int32" 

    departmentCodeParam: 
        name: "departmentCode"
        in: "path"
        description: "ID of departmentCode to process task"
        required: true
        type: "string"

    taskIdParam:
        name: "taskId"
        in: "path"
        description: "ID of task to process"
        required: true
        type: "integer"
        format: "int64"            
definitions:
    Task: 
      type: "object"
      properties: 
        departmentName: 
          type: "string"   
        workflowName: 
          type: "string"
        taskId: 
          type: "integer"
          format: "int32" 
        taskName: 
          type: "string"
        owner: 
          type: "string"  
        creationDate: 
          type: "string"
        dueDate: 
          type: "string"
        description: 
          type: "string"
        departmentCode:
          type: "string"
        priority:
          type: "string" 
          
    TaskMini: 
      type: "object"
      properties: 
        name: 
          type: "string"   
        description: 
          type: "string"
        owner: 
          type: "string"
        creationDate: 
          type: "string"
          format: "date"
        taskStatus: 
          type: "string"
          
    Workflow: 
      type: "object"
      properties: 
        workflowName: 
          type: "string"   
        tasks:
          description: "Contains the list of task"
          type: "array"
          items: 
             $ref: "#/definitions/TaskMini"
          
    CaseDetails: 
      type: "object"
      properties: 
        caseNumber: 
          type: "integer"
          format: "int32"
        caseType: 
          type: "string"   
        issuer: 
          type: "string"
        createdDate: 
          type: "string"
        status: 
          type: "string"
        workflows:
          description: "Contains the list of workflow"
          type: "array"
          items: 
              $ref: "#/definitions/Workflow"  
      
    Case: 
      type: "object"
      allOf: 
          -  $ref: "#/definitions/NewCase"
      required: 
          - "id"
      properties: 
        id: 
          type: "integer"
          format: "int32"
        departmentName: 
          type: "string"   

    NewCase: 
      type: "object"
      required: 
          - "departmentCode"
          - "fullName"
      properties: 
        departmentCode: 
          type: "string"   
        fullName: 
          type: "string"
        createdDate: 
          type: "string"
          format: "date"
        priority: 
          type: "integer"
          format: "int32"  
        caseType: 
          type: "string"  

    
    Search:
      type: "object"
      properties: 
        skip: 
          type: "integer"
          format: "int32" 
        limit: 
          type: "integer"
          format: "int32"
        order: 
          type: "string"
        data:
          $ref: '#/definitions/ComplexRestriction'  
    
    Restriction:
      type: object
      discriminator: type
      properties:
        restrictionType:
            type: string
        
        type:
            type: string
      required:
        - restrictionType
        - type    
        
    SimpleRestriction:
      allOf:
        - $ref: '#/definitions/Restriction'
      type: "object"
      properties: 
              
        property: 
           $ref: '#/definitions/Property'
          
        matchMode: 
          type: "string"
          enum:
              - CONTAINS
              - STARTS_WITH  
              - ENDS_WITH
              - EXACTLY_MATCHES
              - EQUAL
              - GREATER_THAN
              - GREATER_OR_EQUAL
              - SMALLER_THAN
              - SMALLER_OR_EQUAL
              - NOT_CONTAINS
              - NOT_STARTS_WITH  
              - NOT_ENDS_WITH
              - NOT_EXACTLY_MATCHES
              - NOT_EQUAL
        value: 
          type: "string"

    
    ComplexRestriction:
      allOf:
        - $ref: '#/definitions/Restriction'
      type: "object"
      properties: 
        booleanLogic: 
          type: "string"
          enum:
              - AND
              - OR
        restrictions:
            type: "array"
            items: 
              $ref: "#/definitions/Restriction"
    
    Property:
      type: "object"
      properties: 
        name: 
          type: "string"
                
        type: 
          type: "string"
          enum:
              - STRING
              - INT  
              - DOUBLE
              - BOOLEAN         
    
    Navigation: 
      type: "object"
      properties: 
        rel: 
          type: "string"
          enum:
              - SELF
              - NEXT
              - PREVIOUS
              - FIRST
              - LAST
        href: 
          type: "string"
          
    CollectionResponse:
      type: "object"  
      properties: 
        skip: 
          type: "integer"
          format: "int32" 
        limit: 
          type: "integer"
          format: "int32"
        total: 
          type: "integer"
          format: "int32" 
        data:
          type: "object"
          properties:
            cases:
              type: "array"
              items: 
                $ref: "#/definitions/Case"
            tasks:
              type: "array"
              items: 
                $ref: "#/definitions/Task"   
        links: 
          type: "array"
          items: 
            $ref: "#/definitions/Navigation"
    messages:
       type: "object"
       properties:
        owner: 
          type: "string"   
        description: 
          type: "string"
        workflowName: 
          type: "string"
        workflows: 
          type: "string"
        creationDate: 
          type: "string" 
        issuer: 
          type: "string"   
        caseType: 
          type: "string"
        createdDate: 
          type: "string"
        caseNumber: 
          type: "string"
        name: 
          type: "string"   
        tasks: 
          type: "string"
        taskStatus: 
          type: "string"
        status: 
          type: "string"        
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      
responses:
    CaseResponse:
      description: "case response"
      schema:
        $ref: '#/definitions/Case'
      examples: 
          CaseExample:
            externalValue: 'http://jsoneditoronline.org/?id=fb5f17913d52bcb420b29c01123358b2'       
    CaseDetailResponse:
      description: "case response"
      schema:
        $ref: '#/definitions/CaseDetails'
      examples: 
          CaseDetailsExample:
            externalValue: 'http://jsoneditoronline.org/?id=e822939b3052ef6df6e518d8ec6cff5b'       
               
    CollectionResponse:            
        description: "tasks or cases response"
        schema:
          type: array
          items:
            $ref: '#/definitions/CollectionResponse'   
        examples: 
          CollectionResponseExample:
            externalValue: 'http://jsoneditoronline.org/?id=fb5f17913d52bcb420b29c011222b471'     
    TaskResponse:
        description: "task response"
        schema:
          $ref: '#/definitions/Task'
        examples: 
          taskExample:
            externalValue: 'http://jsoneditoronline.org/?id=7a307fc39d48cb1dc3338fb1c5456163'       
               
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: "unexpected error"
      schema:
        $ref: '#/definitions/Error'        
